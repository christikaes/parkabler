import { PRIMARY_OUTLET } from './shared';
import { UrlSegment, UrlTree } from './url_tree';
import { forEach, shallowEqual } from './utils/collection';
import { TreeNode } from './utils/tree';
export function createUrlTree(route, urlTree, commands, queryParams, fragment) {
    if (commands.length === 0) {
        return tree(urlTree._root, urlTree, queryParams, fragment);
    }
    const normalizedCommands = normalizeCommands(commands);
    if (navigateToRoot(normalizedCommands)) {
        return tree(new TreeNode(urlTree.root, []), urlTree, queryParams, fragment);
    }
    const startingNode = findStartingNode(normalizedCommands, urlTree, route);
    const updated = normalizedCommands.commands.length > 0 ?
        updateMany(startingNode.children.slice(0), normalizedCommands.commands) :
        [];
    const newRoot = constructNewTree(urlTree._root, startingNode, updated);
    return tree(newRoot, urlTree, queryParams, fragment);
}
function tree(root, urlTree, queryParams, fragment) {
    const q = queryParams ? stringify(queryParams) : urlTree.queryParams;
    const f = fragment ? fragment : urlTree.fragment;
    return new UrlTree(root, q, f);
}
function navigateToRoot(normalizedChange) {
    return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 &&
        normalizedChange.commands[0] == '/';
}
class NormalizedNavigationCommands {
    constructor(isAbsolute, numberOfDoubleDots, commands) {
        this.isAbsolute = isAbsolute;
        this.numberOfDoubleDots = numberOfDoubleDots;
        this.commands = commands;
    }
}
function normalizeCommands(commands) {
    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] == '/') {
        return new NormalizedNavigationCommands(true, 0, commands);
    }
    let numberOfDoubleDots = 0;
    let isAbsolute = false;
    const res = [];
    for (let i = 0; i < commands.length; ++i) {
        const c = commands[i];
        if (!(typeof c === 'string')) {
            res.push(c);
            continue;
        }
        const parts = c.split('/');
        for (let j = 0; j < parts.length; ++j) {
            let cc = parts[j];
            if (i == 0) {
                if (j == 0 && cc == '.') {
                }
                else if (j == 0 && cc == '') {
                    isAbsolute = true;
                }
                else if (cc == '..') {
                    numberOfDoubleDots++;
                }
                else if (cc != '') {
                    res.push(cc);
                }
            }
            else {
                if (cc != '') {
                    res.push(cc);
                }
            }
        }
    }
    return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
}
function findStartingNode(normalizedChange, urlTree, route) {
    if (normalizedChange.isAbsolute) {
        return urlTree._root;
    }
    else {
        const urlSegment = findUrlSegment(route, urlTree, normalizedChange.numberOfDoubleDots);
        return findMatchingNode(urlSegment, urlTree._root);
    }
}
function findUrlSegment(route, urlTree, numberOfDoubleDots) {
    const urlSegment = route.snapshot._lastUrlSegment;
    const path = urlTree.pathFromRoot(urlSegment);
    if (path.length <= numberOfDoubleDots) {
        throw new Error('Invalid number of \'../\'');
    }
    return path[path.length - 1 - numberOfDoubleDots];
}
function findMatchingNode(segment, node) {
    if (node.value === segment)
        return node;
    for (let c of node.children) {
        const r = findMatchingNode(segment, c);
        if (r)
            return r;
    }
    throw new Error(`Cannot find url segment '${segment}'`);
}
function constructNewTree(node, original, updated) {
    if (node === original) {
        return new TreeNode(node.value, updated);
    }
    else {
        return new TreeNode(node.value, node.children.map(c => constructNewTree(c, original, updated)));
    }
}
function updateMany(nodes, commands) {
    const outlet = getOutlet(commands);
    const nodesInRightOutlet = nodes.filter(c => c.value.outlet === outlet);
    if (nodesInRightOutlet.length > 0) {
        const nodeRightOutlet = nodesInRightOutlet[0];
        nodes[nodes.indexOf(nodeRightOutlet)] = update(nodeRightOutlet, commands);
    }
    else {
        nodes.push(update(null, commands));
    }
    return nodes;
}
function getPath(commands) {
    if (!(typeof commands[0] === 'string'))
        return commands[0];
    const parts = commands[0].toString().split(':');
    return parts.length > 1 ? parts[1] : commands[0];
}
function getOutlet(commands) {
    if (!(typeof commands[0] === 'string'))
        return PRIMARY_OUTLET;
    const parts = commands[0].toString().split(':');
    return parts.length > 1 ? parts[0] : PRIMARY_OUTLET;
}
function update(node, commands) {
    const rest = commands.slice(1);
    const next = rest.length === 0 ? null : rest[0];
    const outlet = getOutlet(commands);
    const path = getPath(commands);
    if (!node && !(typeof next === 'object')) {
        const urlSegment = new UrlSegment(path, {}, outlet);
        const children = rest.length === 0 ? [] : [update(null, rest)];
        return new TreeNode(urlSegment, children);
    }
    else if (!node && typeof next === 'object') {
        const urlSegment = new UrlSegment(path, stringify(next), outlet);
        return recurse(urlSegment, node, rest.slice(1));
    }
    else if (node && outlet !== node.value.outlet) {
        return node;
    }
    else if (node && typeof path === 'object') {
        const newSegment = new UrlSegment(node.value.path, stringify(path), node.value.outlet);
        return recurse(newSegment, node, rest);
    }
    else if (node && typeof next === 'object' && compare(path, stringify(next), node.value)) {
        return recurse(node.value, node, rest.slice(1));
    }
    else if (node && typeof next === 'object') {
        const urlSegment = new UrlSegment(path, stringify(next), outlet);
        return recurse(urlSegment, node, rest.slice(1));
    }
    else if (node && compare(path, {}, node.value)) {
        return recurse(node.value, node, rest);
    }
    else {
        const urlSegment = new UrlSegment(path, {}, outlet);
        return recurse(urlSegment, node, rest);
    }
}
function stringify(params) {
    const res = {};
    forEach(params, (v, k) => res[k] = `${v}`);
    return res;
}
function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
}
function recurse(urlSegment, node, rest) {
    if (rest.length === 0) {
        return new TreeNode(urlSegment, []);
    }
    const children = node ? node.children.slice(0) : [];
    return new TreeNode(urlSegment, updateMany(children, rest));
}
//# sourceMappingURL=data:application/json;base64,