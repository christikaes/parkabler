import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { PRIMARY_OUTLET } from './shared';
import { UrlSegment } from './url_tree';
import { shallowEqual } from './utils/collection';
import { Tree, TreeNode } from './utils/tree';
export class RouterState extends Tree {
    constructor(root, queryParams, fragment, snapshot) {
        super(root);
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.snapshot = snapshot;
    }
}
export function createEmptyState(rootComponent) {
    const snapshot = createEmptyStateSnapshot(rootComponent);
    const emptyUrl = new BehaviorSubject([new UrlSegment('', {}, PRIMARY_OUTLET)]);
    const emptyParams = new BehaviorSubject({});
    const emptyQueryParams = new BehaviorSubject({});
    const fragment = new BehaviorSubject('');
    const activated = new ActivatedRoute(emptyUrl, emptyParams, PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new TreeNode(activated, []), emptyQueryParams, fragment, snapshot);
}
function createEmptyStateSnapshot(rootComponent) {
    const rootUrlSegment = new UrlSegment('', {}, PRIMARY_OUTLET);
    const emptyUrl = [rootUrlSegment];
    const emptyParams = {};
    const emptyQueryParams = {};
    const fragment = '';
    const activated = new ActivatedRouteSnapshot(emptyUrl, emptyParams, PRIMARY_OUTLET, rootComponent, null, rootUrlSegment);
    return new RouterStateSnapshot(new TreeNode(activated, []), emptyQueryParams, fragment);
}
export class ActivatedRoute {
    constructor(urlSegments, params, outlet, component, futureSnapshot) {
        this.urlSegments = urlSegments;
        this.params = params;
        this.outlet = outlet;
        this.component = component;
        this._futureSnapshot = futureSnapshot;
    }
}
export class ActivatedRouteSnapshot {
    constructor(urlSegments, params, outlet, component, routeConfig, lastUrlSegment) {
        this.urlSegments = urlSegments;
        this.params = params;
        this.outlet = outlet;
        this.component = component;
        this._routeConfig = routeConfig;
        this._lastUrlSegment = lastUrlSegment;
    }
}
export class RouterStateSnapshot extends Tree {
    constructor(root, queryParams, fragment) {
        super(root);
        this.queryParams = queryParams;
        this.fragment = fragment;
    }
}
export function advanceActivatedRoute(route) {
    if (route.snapshot && !shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
        route.snapshot = route._futureSnapshot;
        route.urlSegments.next(route.snapshot.urlSegments);
        route.params.next(route.snapshot.params);
    }
    else {
        route.snapshot = route._futureSnapshot;
    }
}
//# sourceMappingURL=data:application/json;base64,