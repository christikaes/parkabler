"use strict";
var Observable_1 = require('rxjs/Observable');
var of_1 = require('rxjs/observable/of');
var shared_1 = require('./shared');
var url_tree_1 = require('./url_tree');
var collection_1 = require('./utils/collection');
var tree_1 = require('./utils/tree');
var NoMatch = (function () {
    function NoMatch() {
    }
    return NoMatch;
}());
var GlobalRedirect = (function () {
    function GlobalRedirect(segments) {
        this.segments = segments;
    }
    return GlobalRedirect;
}());
function applyRedirects(urlTree, config) {
    try {
        var transformedChildren = urlTree._root.children.map(function (c) { return applyNode(config, c); });
        return createUrlTree(urlTree, transformedChildren);
    }
    catch (e) {
        if (e instanceof GlobalRedirect) {
            return createUrlTree(urlTree, [constructNodes(e.segments, [], [])]);
        }
        else if (e instanceof NoMatch) {
            return new Observable_1.Observable(function (obs) { return obs.error(new Error('Cannot match any routes')); });
        }
        else {
            return new Observable_1.Observable(function (obs) { return obs.error(e); });
        }
    }
}
exports.applyRedirects = applyRedirects;
function createUrlTree(urlTree, children) {
    var transformedRoot = new tree_1.TreeNode(urlTree.root, children);
    return of_1.of(new url_tree_1.UrlTree(transformedRoot, urlTree.queryParams, urlTree.fragment));
}
function applyNode(config, url) {
    for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
        var r = config_1[_i];
        try {
            return matchNode(config, r, url);
        }
        catch (e) {
            if (!(e instanceof NoMatch))
                throw e;
        }
    }
    throw new NoMatch();
}
function matchNode(config, route, url) {
    if (!route.path)
        throw new NoMatch();
    if ((route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET) !== url.value.outlet) {
        throw new NoMatch();
    }
    if (route.path === '**') {
        var newSegments_1 = applyRedirectCommands([], route.redirectTo, {});
        return constructNodes(newSegments_1, [], []);
    }
    var m = match(route, url);
    if (!m)
        throw new NoMatch();
    var consumedUrlSegments = m.consumedUrlSegments, lastSegment = m.lastSegment, lastParent = m.lastParent, positionalParamSegments = m.positionalParamSegments;
    var newSegments = applyRedirectCommands(consumedUrlSegments, route.redirectTo, positionalParamSegments);
    var childConfig = route.children ? route.children : [];
    var transformedChildren = lastSegment.children.map(function (c) { return applyNode(childConfig, c); });
    var secondarySubtrees = lastParent ? lastParent.children.slice(1) : [];
    var transformedSecondarySubtrees = secondarySubtrees.map(function (c) { return applyNode(config, c); });
    return constructNodes(newSegments, transformedChildren, transformedSecondarySubtrees);
}
function match(route, url) {
    var path = route.path.startsWith('/') ? route.path.substring(1) : route.path;
    var parts = path.split('/');
    var positionalParamSegments = {};
    var consumedUrlSegments = [];
    var lastParent = null;
    var lastSegment = null;
    var current = url;
    for (var i = 0; i < parts.length; ++i) {
        if (!current)
            return null;
        var p = parts[i];
        var isLastSegment = i === parts.length - 1;
        var isLastParent = i === parts.length - 2;
        var isPosParam = p.startsWith(':');
        if (!isPosParam && p != current.value.path)
            return null;
        if (isLastSegment) {
            lastSegment = current;
        }
        if (isLastParent) {
            lastParent = current;
        }
        if (isPosParam) {
            positionalParamSegments[p.substring(1)] = current.value;
        }
        consumedUrlSegments.push(current.value);
        current = collection_1.first(current.children);
    }
    if (!lastSegment)
        throw 'Cannot be reached';
    return { consumedUrlSegments: consumedUrlSegments, lastSegment: lastSegment, lastParent: lastParent, positionalParamSegments: positionalParamSegments };
}
exports.match = match;
function constructNodes(segments, children, secondary) {
    var prevChildren = children;
    for (var i = segments.length - 1; i >= 0; --i) {
        if (i === segments.length - 2) {
            prevChildren = [new tree_1.TreeNode(segments[i], prevChildren.concat(secondary))];
        }
        else {
            prevChildren = [new tree_1.TreeNode(segments[i], prevChildren)];
        }
    }
    return prevChildren[0];
}
function applyRedirectCommands(segments, redirectTo, posParams) {
    if (!redirectTo)
        return segments;
    if (redirectTo.startsWith('/')) {
        var parts = redirectTo.substring(1).split('/');
        throw new GlobalRedirect(createSegments(redirectTo, parts, segments, posParams));
    }
    else {
        return createSegments(redirectTo, redirectTo.split('/'), segments, posParams);
    }
}
function createSegments(redirectTo, parts, segments, posParams) {
    return parts.map(function (p) { return p.startsWith(':') ? findPosParamSegment(p, posParams, redirectTo) :
        findOrCreateSegment(p, segments); });
}
function findPosParamSegment(part, posParams, redirectTo) {
    var paramName = part.substring(1);
    var pos = posParams[paramName];
    if (!pos)
        throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + part + "'.");
    return pos;
}
function findOrCreateSegment(part, segments) {
    var matchingIndex = segments.findIndex(function (s) { return s.path === part; });
    if (matchingIndex > -1) {
        var r = segments[matchingIndex];
        segments.splice(matchingIndex);
        return r;
    }
    else {
        return new url_tree_1.UrlSegment(part, {}, shared_1.PRIMARY_OUTLET);
    }
}
//# sourceMappingURL=data:application/json;base64,