import { Observable } from 'rxjs/Observable';
import { of } from 'rxjs/observable/of';
import { match } from './apply_redirects';
import { ActivatedRouteSnapshot, RouterStateSnapshot } from './router_state';
import { PRIMARY_OUTLET } from './shared';
import { first, flatten, forEach, merge } from './utils/collection';
import { TreeNode } from './utils/tree';
class CannotRecognize {
}
export function recognize(rootComponentType, config, url) {
    try {
        const match = new MatchResult(rootComponentType, config, [url.root], {}, url._root.children, [], PRIMARY_OUTLET, null, url.root);
        const roots = constructActivatedRoute(match);
        return of(new RouterStateSnapshot(roots[0], url.queryParams, url.fragment));
    }
    catch (e) {
        if (e instanceof CannotRecognize) {
            return new Observable(obs => obs.error(new Error('Cannot match any routes')));
        }
        else {
            return new Observable(obs => obs.error(e));
        }
    }
}
function constructActivatedRoute(match) {
    const activatedRoute = createActivatedRouteSnapshot(match);
    const children = match.leftOverUrl.length > 0 ?
        recognizeMany(match.children, match.leftOverUrl) :
        recognizeLeftOvers(match.children, match.lastUrlSegment);
    checkOutletNameUniqueness(children);
    children.sort((a, b) => {
        if (a.value.outlet === PRIMARY_OUTLET)
            return -1;
        if (b.value.outlet === PRIMARY_OUTLET)
            return 1;
        return a.value.outlet.localeCompare(b.value.outlet);
    });
    return [new TreeNode(activatedRoute, children)];
}
function recognizeLeftOvers(config, lastUrlSegment) {
    if (!config)
        return [];
    const mIndex = matchIndex(config, [], lastUrlSegment);
    return mIndex ? constructActivatedRoute(mIndex) : [];
}
function recognizeMany(config, urls) {
    return flatten(urls.map(url => recognizeOne(config, url)));
}
function createActivatedRouteSnapshot(match) {
    return new ActivatedRouteSnapshot(match.consumedUrlSegments, match.parameters, match.outlet, match.component, match.route, match.lastUrlSegment);
}
function recognizeOne(config, url) {
    const matches = matchNode(config, url);
    for (let match of matches) {
        try {
            const primary = constructActivatedRoute(match);
            const secondary = recognizeMany(config, match.secondary);
            const res = primary.concat(secondary);
            checkOutletNameUniqueness(res);
            return res;
        }
        catch (e) {
            if (!(e instanceof CannotRecognize)) {
                throw e;
            }
        }
    }
    throw new CannotRecognize();
}
function checkOutletNameUniqueness(nodes) {
    let names = {};
    nodes.forEach(n => {
        let routeWithSameOutletName = names[n.value.outlet];
        if (routeWithSameOutletName) {
            const p = routeWithSameOutletName.urlSegments.map(s => s.toString()).join('/');
            const c = n.value.urlSegments.map(s => s.toString()).join('/');
            throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);
        }
        names[n.value.outlet] = n.value;
    });
    return nodes;
}
function matchNode(config, url) {
    const res = [];
    for (let r of config) {
        const m = matchWithParts(r, url);
        if (m) {
            res.push(m);
        }
        else if (r.index) {
            res.push(createIndexMatch(r, [url], url.value));
        }
    }
    return res;
}
function createIndexMatch(r, leftOverUrls, lastUrlSegment) {
    const outlet = r.outlet ? r.outlet : PRIMARY_OUTLET;
    const children = r.children ? r.children : [];
    return new MatchResult(r.component, children, [], lastUrlSegment.parameters, leftOverUrls, [], outlet, r, lastUrlSegment);
}
function matchIndex(config, leftOverUrls, lastUrlSegment) {
    for (let r of config) {
        if (r.index) {
            return createIndexMatch(r, leftOverUrls, lastUrlSegment);
        }
    }
    return null;
}
function matchWithParts(route, url) {
    if (!route.path)
        return null;
    if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== url.value.outlet)
        return null;
    const path = route.path.startsWith('/') ? route.path.substring(1) : route.path;
    if (path === '**') {
        const consumedUrl = [];
        let u = url;
        while (u) {
            consumedUrl.push(u.value);
            u = first(u.children);
        }
        const last = consumedUrl[consumedUrl.length - 1];
        return new MatchResult(route.component, [], consumedUrl, last.parameters, [], [], PRIMARY_OUTLET, route, last);
    }
    const m = match(route, url);
    if (!m)
        return null;
    const { consumedUrlSegments, lastSegment, lastParent, positionalParamSegments } = m;
    const p = lastSegment.value.parameters;
    const posParams = {};
    forEach(positionalParamSegments, (v, k) => { posParams[k] = v.path; });
    const parameters = merge(p, posParams);
    const secondarySubtrees = lastParent ? lastParent.children.slice(1) : [];
    const children = route.children ? route.children : [];
    const outlet = route.outlet ? route.outlet : PRIMARY_OUTLET;
    return new MatchResult(route.component, children, consumedUrlSegments, parameters, lastSegment.children, secondarySubtrees, outlet, route, lastSegment.value);
}
class MatchResult {
    constructor(component, children, consumedUrlSegments, parameters, leftOverUrl, secondary, outlet, route, lastUrlSegment) {
        this.component = component;
        this.children = children;
        this.consumedUrlSegments = consumedUrlSegments;
        this.parameters = parameters;
        this.leftOverUrl = leftOverUrl;
        this.secondary = secondary;
        this.outlet = outlet;
        this.route = route;
        this.lastUrlSegment = lastUrlSegment;
    }
}
//# sourceMappingURL=data:application/json;base64,